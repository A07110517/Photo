Угоди
==========

Yii ставить угоди вище конфігурацій. Дотримуючись угод, ви зможете створювати серйозні додатки
без необхідності написання й підтримай складних конфігурацій. Звичайно ж, при необхідності Yii може
бути змінений за допомогою конфігурацій практично як завгодно.

Нижче представлені угоди, рекомендовані для програмування під Yii.
Для зручності приймемо, що `WebRoot` — це директорія, у яку встановлений додаток.

URL
---

За замовчуванням, Yii розуміє адреси URL наступного формату:

~~~
http://hostname/index.php?r=ControllerId/ActionId
~~~

Get-Змінна `r` представляє [маршрут](/doc/guide/basics.controller#route), з якого Yii отримує інформацію про контролер і дію.
Якщо `ActionId` не зазначений, контролер буде використовувати дію за замовчуванням (визначену в  [CController::defaultaction]).
Якщо ж `ControllerId` також не зазначений (або змінна `r` відсутня), буде використаний
контролер за замовчуванням (визначений в  [CWebApplication::defaultController]).

Використовуючи [CUrlManager] можна створювати й застосовувати більш Seo-дружні адреси URL, такі як 
`http://hostname/ControllerId/ActionId.html`. Ця можливість докладно описана в розділі [Красиві адреси URL](/doc/guide/topics.url).

Код
---

Yii рекомендує йменувати змінні, функції й класи, використовуючи Горбатий регістр (Camel Case), що має на увазі написання
кожного слова в імені з великої букви й з'єднання їх без пробілів.
Перше слово в імені змінних і функцій повинне бути написане в нижньому регістрі, щоб відрізняти їх від імен
класів (наприклад, `$basepath`, `runController()`, `LinkPager`). 
Для імен приватних членів класу рекомендується
використовувати знак підкреслення як префікса (наприклад, `$_actionList`).

Оскільки простори імен не підтримуються версіями PHP до 5.3.0, рекомендується, щоб імена класів були 
унікальними щоб уникнути конфлікту імен із класами сторонніх виробників. Із цієї причини всі імена класів
фреймворка мають префікс "C".

Особливе правило для імен класів контролерів — вони повинні бути доповнені словом `Controller`. При цьому ідентифікатором
контролера буде ім'я класу з першою буквою в нижньому регістрі й без слова `Controller`.
Наприклад, для класу `Pagecontroller` ідентифікатором буде `page`. Дане правило робить додаток більш захищеним.
Воно також робить адреси URL більш зрозумілими ( приміром, `/index.php?r=page/index` замість
`/index.php?r=PageController/index`).

Конфігурація
------------

Конфігурація — це масив пар ключ-значення, де кожний ключ являє собою ім'я властивості об'єкта, що конфігурується, 
а значення — початкове значення відповіднї властивості.
Приміром, `array('name'=>'My application', 'basePath'=>'./protected')` ініціалізує властивості `name` і `basePath`
відповідними значеннями.

Будь-які властивості об'єкта, що доступні для запису, можуть бути зконфігуровані. Якщо деякі 
властивості не зконфігуровані, для них будуть використані значення за замовчуванням. 
При конфігуруванні властивостей рекомендується вивчити відповідний розділ документації, щоб уникнути завдання некоректних значень.

Файли
----

Угоди для іменування й використання файлів залежать від їх типів.
Файли класів повинні бути названі відповідно до назв класів, що містяться в них.
Наприклад, клас [CController] знаходиться в файлі `CController.php`. 
Загальний клас — це клас, який може бути використаний будь-якими іншими класами.
Кожний файл класів повинен містити максимум один загальний клас. Приватні класи 
(класи, які можуть бути використані тільки одним загальним класом) повинні перебувати в одному
файлі із загальним класом.

Файли відображень повинні мати такі ж імена, як і відображення, що містяться в них. 
Приміром, відображення `index` знаходиться в файлі `index.php`. 
Файл відображення — це Php-Скрипт, що містить HTML і Php-Код, в основному для задання відображення
користувацького інтерфейсу.

Конфігураційні файли можуть іменуватися довільним образом. Файл конфігурації —
це Php-Скрипт, чиє єдине призначення — повертати
асоціативний масив, що представляє конфігурацію.

Директорії
----------

В Yii визначений набір директорій для різних цілей. Кожна з них може бути змінена при необхідності.

   - `WebRoot/protected`: це [базова директорія додатка](/doc/guide/basics.application#application-base-directory), 
утримуюча всі найбільш важливі з погляду безпеки Php-Скріпти й файли даних. Псевдонім за замовчуванням для цього шляху — `application`.
Ця директорія і її вміст повинні бути захищені від прямого доступу з веб. Директорія може бути настроєна через 
[CWebApplication::basePath];

   - `WebRoot/protected/runtime`: ця директорія містить приватні тимчасові файли, згенеровані під час виконання додатка.
Ця директорія повинна бути доступна для запису веб-сервером. Вона може бути настроєна через [Capplication::runtimePath];

   - `WebRoot/protected/extensions`: ця директорія містить всі сторонні розширення. Вона може бути настроєна через 
[CApplication::extensionPath];

   - `WebRoot/protected/modules`: ця директорія містить усі [модулі](/doc/guide/basics.module) додатка, кожний з яких представлений в окремій піддиректорії. Директорія може бути настроєна через [CWebApplication::modulePath];

   - `WebRoot/protected/controllers`: ця директорія містить файли всіх класів контролерів. Вона може бути настроєна через [CWebApplication::controllerPath];

   - `WebRoot/protected/views`: ця директорія містить файли всіх відображень, включаючи відображення контролерів, макети й системні
відображення. Вона може бути настроєна через [CWebApplication::viewPath];

   - `WebRoot/protected/views/ControllerId`: ця директорія містить файли відображень для окремого класу контролера. 
Тут `ControllerId` є ідентифікатором контролера. Директорія може бути настроєна через [CController::viewPath];

   - `WebRoot/protected/views/layouts`: ця директорія містить файли макетів. Вона може бути настроєна через 
[CWebApplication::layoutpath];

   - `WebRoot/protected/views/system`: ця директорія містить файли системних відображень (використовуються для виводу повідомлень про 
помилки і виключення). Вона може бути настроєна через [CWebApplication::systemViewPath];

   - `WebRoot/assets`: ця директорія містить файли ресурсів (приватні файли, які можуть бути опубліковані для доступу до них з веб). 
Директорія повинна бути доступна для запису процесами веб-сервера. Вона може бути настроєна через [CAssetManager::basePath];

   - `WebRoot/themes`: ця директорія містить різні теми оформлення, які доступні додатку. 
Кожна піддиректорія містить окрему тему з іменем, що збігаються з назвою піддиректорії. Директорія може бути настроєна через [CThemeManager::basePath].

База даних
-----------

Більшість додатків зберігають дані в БД. Ми пропонуємо угоди
для таблиць і атрибутів БД. Варто відзначити, що Yii не вимагає суворої відповідності
їм.

   - Таблиці й атрибути іменуються в нижньому регістрі.

   - Слова в назві розділяються підкресленням (наприклад, `product_order`).

   - В іменах таблиць використовується або однина, або множина, але не
   те й інше відразу. Ми рекомендуємо використовувати однину.

   - Імена таблиць можуть містити префікс. Наприклад, `tbl_`. Це особливо корисно
коли таблиці нашого додатка мастяться в БД, що використовується одночасно іншими
додатками.

<div class="revision">$Id: basics.convention.txt 1768 2010-02-01 01:34:15Z qiang.xue $</div>
